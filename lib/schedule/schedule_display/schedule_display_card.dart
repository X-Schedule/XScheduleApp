import 'package:flutter/material.dart';
import 'package:xschedule/global/static_content/extensions/int_extension.dart';
import 'package:xschedule/global/static_content/xschedule_materials/refresh_widget.dart';
import 'package:xschedule/schedule/schedule_display/schedule_display.dart';

import '../../global/dynamic_content/backend/schedule_directory.dart';
import '../schedule.dart';
import 'bell_display/bell_tile.dart';

class ScheduleDisplayCard extends StatelessWidget {
  const ScheduleDisplayCard({super.key, required this.date});

  final DateTime date;

  @override
  Widget build(BuildContext context) {
    final ColorScheme colorScheme = Theme.of(context).colorScheme;
    final MediaQueryData mediaQuery = MediaQuery.of(context);

    // Determines remaining height for card on page
    final double cardHeight = mediaQuery.size.height -
        200 -
        mediaQuery.padding.top -
        mediaQuery.padding.bottom;

    // If schedule does not exist for date, display "No Classes"
    if (!ScheduleDirectory.readSchedule(date).containsClasses()) {
      //i.e. no schedule/classes
      return _buildEmpty(context, cardHeight);
    }

    // Schedule variables from date (by now, schedule cannot be null)
    final Schedule schedule = ScheduleDirectory.schedules[date]!;
    final Map<String, String> bells = schedule.bells;

    // The height (in pxs) that each minute will be on the screen, based on the devices screen size etc.
    final double minuteHeight = cardHeight / 430;

    // Returns the schedule wrapped in Showcase
    return ScheduleDisplay.tutorialSystem.showcase(
        context: context,
        uniqueNull: true,
        tutorial: date == ScheduleDisplay.tutorialDate
            ? 'tutorial_schedule'
            : 'no_tutorial',
        child: Padding(
          padding: const EdgeInsets.symmetric(vertical: 8),
          // Stack containing schedule and current-time overlay
          child: Stack(
            children: [
              Container(
                margin: const EdgeInsets.only(left: 5, right: 15),
                height: cardHeight,
                // Row containing timeline and schedule
                child: Row(
                  children: [
                    // Column timeline aligned left (technically a Stack)
                    Stack(
                      // Generated list of Text widgets
                      children: List<Widget>.generate(8, (i) {
                        int hour = (i + 8) % 12;
                        if (hour == 0) {
                          hour = 12;
                        }
                        // Vertical padding incremental to index
                        return Padding(
                            padding:
                                EdgeInsets.only(top: minuteHeight * i * 60),
                            child: Text(
                              // Time text incremental to index
                              '${hour.multiDecimal()} - ',
                              style: TextStyle(
                                  fontSize: 15,
                                  height: 0.9,
                                  color: colorScheme
                                      .onSurface), //Text px height = 18
                            ));
                      }),
                    ),
                    // Expanded Box (as much width as possible) wrapping sized box (set height of card) wrapping stack of bell tiles
                    Expanded(
                        child: Container(
                      padding: const EdgeInsets.only(top: 6.5),
                      height: cardHeight,
                      // Schedule column generated by schedule order (technically a Stack)
                      child: Stack(
                        alignment: Alignment.topCenter,
                        children: List<Widget>.generate(bells.keys.length, (i) {
                          // Returns Schedule 'Tile' based on schedule info, cycling through bell keys
                          final String key = bells.keys.toList()[i];
                          return BellTile(
                              date: date,
                              bell: key,
                              minuteHeight: minuteHeight);
                        }),
                      ),
                    )),
                  ],
                ),
              ),
              // Current Time Indicator
              RefreshWidget(
                  refreshDuration: const Duration(minutes: 1),
                  builder: (context) {
                    // Calculates the margin, from the top of the schedule, at which the current time indicator is placed
                    final DateTime currentTime = DateTime.now();
                    final double timeMargin =
                        currentTime.hour * 60 + currentTime.minute - 480;

                    // If time isn't to be displayed, return empty Container
                    if (timeMargin < 0 ||
                        timeMargin > 425 ||
                        date != ScheduleDisplay.initialDate) {
                      return Container();
                    }

                    // Return translucent overlay of time indicator
                    return Opacity(
                      opacity: 0.6,
                      // Padding from top corresponding to current time
                      child: Padding(
                        padding: EdgeInsets.only(
                            left: 25, top: timeMargin * cardHeight / 425),
                        // Row containing blue line and arrow icon
                        child: Row(
                          children: [
                            Container(
                              height: 1.5,
                              width: mediaQuery.size.width - 83,
                              color: colorScheme.secondary,
                            ),
                            const SizedBox(width: 8),
                            Icon(
                              Icons.arrow_back_ios,
                              size: 10,
                              color: colorScheme.secondary,
                            )
                          ],
                        ),
                      ),
                    );
                  })
            ],
          ),
        ));
  }

  // Builds the display for a day with no classes
  Widget _buildEmpty(BuildContext context, double cardHeight) {
    final ColorScheme colorScheme = Theme.of(context).colorScheme;

    // Returns "No Classes" text centered
    return Container(
      height: cardHeight,
      alignment: Alignment.center,
      margin: const EdgeInsets.only(left: 5, right: 10, top: 10, bottom: 10),
      child: Text(
        'No Classes',
        style: TextStyle(
            fontSize: 30,
            fontWeight: FontWeight.w500,
            color: colorScheme.onSurface),
      ),
    );
  }
}
